[{"path":"/articles/basic_guide.html","id":"basic-r-usage-guide-for-rmzqc","dir":"Articles","previous_headings":"","what":"Basic R-Usage Guide for rMZQC","title":"Basic R-Usage Guide for rMZQC","text":"vignette serves quickstart guide R users create save mzQC document. Target Audience: R users","code":""},{"path":"/articles/basic_guide.html","id":"read-an-mzqc-file-and-extract-some-data","dir":"Articles","previous_headings":"Basic R-Usage Guide for rMZQC","what":"Read an mzQC file and extract some data","title":"Basic R-Usage Guide for rMZQC","text":"Hint: receive error callingreadMZQC indicates mzQC valid JSON, since NaN values quoted (\"NaN\") replaced null (unquoted), depending context. short: null may become NA R part array, see https://github.com/jeroen/jsonlite/issues/70#issuecomment-431433773.","code":"library(rmzqc) data = readMZQC(system.file(\"./testdata/test.mzQC\", package = \"rmzqc\", mustWork = TRUE)) cat(\"This file has \", length(data$runQualities), \" runqualities\\n\") ## This file has  1  runqualities cat(\"  - file: \", data$runQualities[[1]]$metadata$inputFiles[[1]]$name, \"\\n\") ##   - file:  special.raw cat(\"  - # of metrics: \", length(data$runQualities[[1]]$qualityMetrics), \"\\n\") ##   - # of metrics:  1 cat(\"    - metric #1 name: \", data$runQualities[[1]]$qualityMetrics[[1]]$name, \"\\n\") ##     - metric #1 name:  number of MS1 spectra cat(\"    - metric #1 value: \", data$runQualities[[1]]$qualityMetrics[[1]]$value, \"\\n\") ##     - metric #1 value:  13405 Error in parse_con(txt, bigint_as_char) :  lexical error: invalid char in json text. cursor_int\": [ NaN,NaN,NaN,NaN,825282.0,308263 (right here) ------^"},{"path":"/articles/basic_guide.html","id":"create-a-minimal-mzqc-document","dir":"Articles","previous_headings":"Basic R-Usage Guide for rMZQC","what":"Create a minimal mzQC document","title":"Basic R-Usage Guide for rMZQC","text":"","code":"library(rmzqc) ## we need a proper URI (i.e. no backslashes and a scheme, e.g. 'file:') ## otherwise writing will fail raw_file = localFileToURI(\"c:\\\\data\\\\special.raw\", FALSE)  file_format = getCVTemplate(accession = filenameToCV(raw_file)) ## Downloading obo from 'https://github.com/HUPO-PSI/psi-ms-CV/releases/download/v4.1.194/psi-ms.obo' ... ptxqc_software = toAnalysisSoftware(id = \"MS:1003162\", version = \"1.0.13\") ## you could use 'version = packageVersion(\"PTXQC\")' to automate further run1_qc = MzQCrunQuality$new(metadata = MzQCmetadata$new(label = raw_file,                          inputFiles = list(MzQCinputFile$new(basename(raw_file),                                                              raw_file,                                                              file_format)),                          analysisSoftware = list(ptxqc_software)),                          qualityMetrics = list(toQCMetric(id = \"MS:4000059\", value = 13405), ## number of MS1 scans                                                toQCMetric(id = \"MS:4000063\", value = list(\"MS:1000041\" = 1:3, \"UO:0000191\" = c(0.1, 0.8, 0.1))) # MS2 known precursor charges fractions                                                )                          )  mzQC_document = MzQCmzQC$new(version = \"1.0.0\",                               creationDate = MzQCDateTime$new(),                               contactName = Sys.info()[\"user\"],                               contactAddress = \"test@user.info\",                               description = \"A minimal mzQC test document with bogus data\",                              runQualities = list(run1_qc),                              setQualities = list(),                               controlledVocabularies = list(getCVInfo()))  ## write it out mzqc_filename = paste0(getwd(), \"/test.mzQC\") writeMZQC(mzqc_filename, mzQC_document) cat(mzqc_filename, \"written to disk!\\n\") ## C:/dev/rmzqc/vignettes/test.mzQC written to disk! ## read it again mq = readMZQC(mzqc_filename)  ## print some basic stats gettextf(\"This mzQC was created on %s and has %d quality metric(s) in total.\", dQuote(mq$creationDate$datetime), length(mq$runQualities) + length(mq$setQualities)) ## [1] \"This mzQC was created on \\\"2025-06-03T00:00:00Z\\\" and has 1 quality metric(s) in total.\""},{"path":"/articles/basic_guide.html","id":"different-value-types-single-value-n-tuple-table-matrix-for-qualitymetrics","dir":"Articles","previous_headings":"Basic R-Usage Guide for rMZQC","what":"Different Value Types (single value, n-tuple, table, matrix) for QualityMetric’s","title":"Basic R-Usage Guide for rMZQC","text":"mzQC allows 4 different kinds value types qualityMetric: - Single value - n-tuple - table - matrix See toQCMetric() examples. create example , know R datastructures employ. Using data.frame, instead list, give wrong JSON formatting leads validation failures.","code":""},{"path":"/articles/basic_guide.html","id":"single-value","dir":"Articles","previous_headings":"Basic R-Usage Guide for rMZQC > Different Value Types (single value, n-tuple, table, matrix) for QualityMetric’s","what":"Single Value","title":"Basic R-Usage Guide for rMZQC","text":"single value (MS:4000003) easiest. Just assign string number value attribute:","code":"qualityMetric_singleValue = toQCMetric(id = \"MS:4000059\", value = 13405) ## number of MS1 scans  ## let's look at how this looks in JSON  jsonlite::toJSON(qualityMetric_singleValue, pretty = TRUE, auto_unbox = TRUE) ## { ##   \"accession\": \"MS:4000059\", ##   \"name\": \"number of MS1 spectra\", ##   \"description\": \"\\\"The number of MS1 events in the run.\\\" [PSI:MS]\", ##   \"value\": 13405 ## }"},{"path":"/articles/basic_guide.html","id":"n-tuple","dir":"Articles","previous_headings":"Basic R-Usage Guide for rMZQC > Different Value Types (single value, n-tuple, table, matrix) for QualityMetric’s","what":"n-tuple","title":"Basic R-Usage Guide for rMZQC","text":"n-tuple (MS:4000004) just vector R:","code":"qualityMetric_tuple = toQCMetric(id = \"MS:4000061\", value = c(0.45, 0.76, 0.23)) ## MS1 density quantiles  ## let's look at how this looks in JSON  jsonlite::toJSON(qualityMetric_tuple, pretty = TRUE, auto_unbox = TRUE) ## { ##   \"accession\": \"MS:4000061\", ##   \"name\": \"MS1 density quantiles\", ##   \"description\": \"\\\"The first to n-th quantile of MS1 peak density (scan peak counts). A value triplet represents the original QuaMeter metrics, the quartiles of MS1 density. The number of values in the tuple implies the quantile mode.\\\" [PSI:MS]\", ##   \"value\": [0.45, 0.76, 0.23] ## }"},{"path":"/articles/basic_guide.html","id":"table","dir":"Articles","previous_headings":"Basic R-Usage Guide for rMZQC > Different Value Types (single value, n-tuple, table, matrix) for QualityMetric’s","what":"Table","title":"Basic R-Usage Guide for rMZQC","text":"table (MS:4000005) list (data.frame!) columns. example shows table two columns three rows:","code":"qualityMetric_table =   # MS2 known precursor charges fractions                   toQCMetric(id = \"MS:4000063\", value = list(\"MS:1000041\" = 1:3,   ## charge state                                                              \"UO:0000191\" = c(0.1, 0.8, 0.1)))   ## fraction of precursors with that charge                       ## let's look at how this looks in JSON  jsonlite::toJSON(qualityMetric_table, pretty = TRUE, auto_unbox = TRUE) ## { ##   \"accession\": \"MS:4000063\", ##   \"name\": \"MS2 known precursor charges fractions\", ##   \"description\": \"\\\"The fraction of MS/MS precursors of the corresponding charge. The fractions [0,1] are given in the 'Fraction' column, corresponding charges in the 'Charge state' column. The highest charge state is to be interpreted as that charge state or higher.\\\" [PSI:MS]\", ##   \"value\": { ##     \"MS:1000041\": [1, 2, 3], ##     \"UO:0000191\": [0.1, 0.8, 0.1] ##   } ## }"},{"path":"/articles/basic_guide.html","id":"matrix","dir":"Articles","previous_headings":"Basic R-Usage Guide for rMZQC > Different Value Types (single value, n-tuple, table, matrix) for QualityMetric’s","what":"Matrix","title":"Basic R-Usage Guide for rMZQC","text":"matrix (MS:4000006) R matrix: point writing, matrix CV term yet. just make one :","code":"qualityMetric_matrix = toQCMetric(id = \"MS:40000??\", value = matrix(1:9, 3, 3), allow_unknown_id = TRUE) ## Warning in CV$byID(id): Could not find id 'MS:40000??' in CV list (length: ## 6807) qualityMetric_matrix$name = \"unknown metric\" ## let's look at how this looks in JSON  jsonlite::toJSON(qualityMetric_matrix, pretty = TRUE, auto_unbox = TRUE) ## { ##   \"accession\": \"MS:40000??\", ##   \"name\": \"unknown metric\", ##   \"value\": [ ##     [1, 4, 7], ##     [2, 5, 8], ##     [3, 6, 9] ##   ] ## }"},{"path":"/articles/using_a_custom_cv.html","id":"using-a-custom-controlled-vocabulary-for-rmzqc","dir":"Articles","previous_headings":"","what":"Using a custom controlled vocabulary for rMZQC","title":"Using a custom controlled vocabulary for rMZQC","text":"vignette serves guide R users use custom CV creating mzQC document. Warning: settle CV instantiating mzQC objects, since ensures CV terms consistent (checked existance) CV meta information within mzQC document accurate. Target Audience: R users","code":""},{"path":"/articles/using_a_custom_cv.html","id":"create-a-minial-mzqc-document-with-a-custom-cv","dir":"Articles","previous_headings":"Using a custom controlled vocabulary for rMZQC","what":"Create a minial mzQC document with a custom CV","title":"Using a custom controlled vocabulary for rMZQC","text":"Let’s first consider happens default: However, happen run code without internet connection, fall back PSI-MS CV shipped rmzqc package (may contain latest CV terms) Now, package’s PSI-MS CV might still suit , want use latest unpublished CV, downloaded somewhere, handcrafted testing. simply use custom .obo file:","code":"library(rmzqc)  print(getCVInfo()) ## Downloading obo from 'https://github.com/HUPO-PSI/psi-ms-CV/releases/download/v4.1.194/psi-ms.obo' ... ## Reference class object of class \"MzQCcontrolledVocabulary\" ## Field \"name\": ## [1] \"Proteomics Standards Initiative Mass Spectrometry Ontology\" ## Field \"uri\": ## [1] \"https://github.com/HUPO-PSI/psi-ms-CV/releases/download/v4.1.194/psi-ms.obo\" ## Field \"version\": ## [1] \"4.1.194\" ## test if the default CV is usable toQCMetric(id = \"MS:4000059\", value = 13405) ## number of MS1 scans ## Reference class object of class \"MzQCqualityMetric\" ## Field \"accession\": ## [1] \"MS:4000059\" ## Field \"name\": ## [1] \"number of MS1 spectra\" ## Field \"description\": ## [1] \"\\\"The number of MS1 events in the run.\\\" [PSI:MS]\" ## Field \"value\": ## [1] 13405 ## Field \"unit\": ## list() ## With internet: myCV = getCVSingleton() myCV$setData(getCVDictionary(\"latest\")) ## this is done internally by default when you load the package ## Downloading obo from 'https://github.com/HUPO-PSI/psi-ms-CV/releases/download/v4.1.194/psi-ms.obo' ... cat(\"Number of entries in latest CV: \", nrow(getCVSingleton()$getCV()), \"\\n\") ## Number of entries in latest CV:  6807 print(getCVInfo()) ## Reference class object of class \"MzQCcontrolledVocabulary\" ## Field \"name\": ## [1] \"Proteomics Standards Initiative Mass Spectrometry Ontology\" ## Field \"uri\": ## [1] \"https://github.com/HUPO-PSI/psi-ms-CV/releases/download/v4.1.194/psi-ms.obo\" ## Field \"version\": ## [1] \"4.1.194\" ## simulate missing internet connection by invoking the function manually myCV$setData(getCVDictionary(\"local\")) cat(\"Number of entries in local CV: \", nrow(getCVSingleton()$getCV()), \"\\n\") ## Number of entries in local CV:  6806 print(getCVInfo()) ## Reference class object of class \"MzQCcontrolledVocabulary\" ## Field \"name\": ## [1] \"Proteomics Standards Initiative Mass Spectrometry Ontology\" ## Field \"uri\": ## [1] \"https://github.com/HUPO-PSI/psi-ms-CV/releases/download/v4.1.193/psi-ms.obo\" ## Field \"version\": ## [1] \"4.1.193\" myOBO = system.file(\"./cv/psi-ms.obo\", package=\"rmzqc\") ## we will use a local file, but you can point to anything you have (even URI's) myCV$setData(getCVDictionary(\"custom\", myOBO)) cat(\"Number of entries in custom CV: \", nrow(getCVSingleton()$getCV()), \"\\n\") ## Number of entries in custom CV:  6806 print(getCVInfo()) ## Reference class object of class \"MzQCcontrolledVocabulary\" ## Field \"name\": ## [1] \"Proteomics Standards Initiative Mass Spectrometry Ontology\" ## Field \"uri\": ## [1] \"C:/Users/bielow/AppData/Local/R/win-library/4.4/rmzqc/./cv/psi-ms.obo\" ## Field \"version\": ## [1] \"4.1.193\" ## you may want to change the CV-entries, or URI or version manually, before creating an mzQC file: newCV = list(CV = myCV$getData()$CV,               URI = \"https://myURI.com\",              version = \"9.9.2\") myCV$setData(newCV) print(getCVInfo()) ## Reference class object of class \"MzQCcontrolledVocabulary\" ## Field \"name\": ## [1] \"Proteomics Standards Initiative Mass Spectrometry Ontology\" ## Field \"uri\": ## [1] \"https://myURI.com\" ## Field \"version\": ## [1] \"9.9.2\""},{"path":"/articles/validation_guide.html","id":"how-to-syntactically-validate-an-mzqc-file","dir":"Articles","previous_headings":"","what":"How to syntactically validate an mzQC file","title":"Validation of mzQC documents","text":"mzQC file format based upon JSON. writing JSON file, certain substructures required mzQC specification document, items optional. syntax validator build rmzqc allows check mandatory items present, something erroneously omitted mzQC file. three validation functions validateFromFile(), validateFromString() validateFromObj(), depending data hand. result always bool (TRUE/FALSE) attributes (usually ‘errors’) attached. Simply print bool call ‘attributes()’ result (case failure) inspect details. validate file simply: file already JSON string R (.e. need load data file), simply use ‘validateFromString()’ Finally, mzQC root object hand, call ‘validateFromObj()’","code":"library(rmzqc) mzQC_filename = system.file(\"testdata/test.mzQC\", package=\"rmzqc\") #mzQC_filename = \"C:\\\\dev\\\\rmzqc\\\\inst\\\\testdata\\\\test.mzQC\" res = validateFromFile(mzQC_filename) res library(rmzqc) mzQC_strings = readLines(system.file(\"testdata/test.mzQC\", package=\"rmzqc\")) res = validateFromString(mzQC_strings) res library(rmzqc) mzQC_root = rmzqc::readMZQC(system.file(\"testdata/test.mzQC\", package=\"rmzqc\")) res = validateFromObj(mzQC_root) res"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chris Bielow. Author, maintainer. David Jimenez-Morales. Reviewer, contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bielow C (2025). rmzqc: Creation, Reading Validation 'mzqc' Files. R package version 0.5.6, https://github.com/MS-Quality-hub/rmzqc.","code":"@Manual{,   title = {rmzqc: Creation, Reading and Validation of 'mzqc' Files},   author = {Chris Bielow},   year = {2025},   note = {R package version 0.5.6},   url = {https://github.com/MS-Quality-hub/rmzqc}, }"},{"path":"/index.html","id":"rmzqc","dir":"","previous_headings":"","what":"Creation, Reading and Validation of mzqc Files","title":"Creation, Reading and Validation of mzqc Files","text":"R package reading, validating, writing mzQC files.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Creation, Reading and Validation of mzqc Files","text":"can grab rmzqc either CRAN GitHub. GitHub installation give latest package; CRAN version might little older, faster install. get started, see help /vignettes: Please feel free report bugs (see ), issue pull requests!","code":"## CRAN install.packages(\"rmzqc\") ## GitHub if (!require(devtools, quietly = TRUE)) install.packages(\"devtools\") library(\"devtools\")  install_github(\"MS-Quality-hub/rmzqc\", build_vignettes = TRUE, dependencies = TRUE) help(package=\"rmzqc\") browseVignettes(package = 'rmzqc')"},{"path":"/index.html","id":"latest-changes--changelog","dir":"","previous_headings":"","what":"Latest changes / ChangeLog","title":"Creation, Reading and Validation of mzqc Files","text":"Check version history NEWS.md.","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Creation, Reading and Validation of mzqc Files","text":"package vignettes provide examples use rmzqc. package installed (see ), can browse vignettes using either commands within R: want wait long, can look latest online vignette CRAN Currently, vignettes : - Creating storing basic mzQC document using rmzqc (come)","code":"help(package=\"rmzqc\") browseVignettes(package = 'rmzqc')"},{"path":"/index.html","id":"bug-reporting--feature-requests","dir":"","previous_headings":"","what":"Bug reporting / Feature requests","title":"Creation, Reading and Validation of mzqc Files","text":"encounter bug, please use GitHub issue tracker file report. include - stage encounter bug, e.g. installation, importing, exporting, etc - version rmzqc, e.g. call help(package=\"rmzqc\") within R - error message (important!). Either copy provide screen shot. Please precise possible providing bug report: just imagine kind information like order track issue. certain situations, input/output file trying read/write helpful.","code":""},{"path":"/index.html","id":"contributing---get-involved","dir":"","previous_headings":"","what":"Contributing - Get Involved!","title":"Creation, Reading and Validation of mzqc Files","text":"welcome input user base! rmzqc permissive MIT License (see DESCRIPTION file), feel free fork, patch contribute! many ways get involved, need developer! - suggest new metric (think ’s useful) opening new ticket GitHub. - suggest changes functions (improvements bugfixes), see . - suggest improvements documentation - write code (R) submit Pull Request (PR).","code":""},{"path":"/index.html","id":"building-the-package-locally","dir":"","previous_headings":"","what":"Building the package locally","title":"Creation, Reading and Validation of mzqc Files","text":"Use roxygen2 build vignettes documentation: Use pkgdown build html documentation ./docs/:","code":"roxygen2::roxygenize('.', roclets = c('rd', 'collate', 'namespace')) pkgdown::buildsite()"},{"path":"/index.html","id":"links","dir":"","previous_headings":"","what":"Links","title":"Creation, Reading and Validation of mzqc Files","text":"See https://github.com/HUPO-PSI/mzQC/ specification details mzQC format.","code":""},{"path":"/reference/checkUnexpectedFields.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for unexpected fields in data and warn if any are found — checkUnexpectedFields","title":"Check for unexpected fields in data and warn if any are found — checkUnexpectedFields","text":"function compares fields data list expected fields warns unexpected fields.","code":""},{"path":"/reference/checkUnexpectedFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for unexpected fields in data and warn if any are found — checkUnexpectedFields","text":"","code":"checkUnexpectedFields(data, expected_fields, class_name, context = NULL)"},{"path":"/reference/checkUnexpectedFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for unexpected fields in data and warn if any are found — checkUnexpectedFields","text":"data data structure check expected_fields character vector expected field names class_name name class populated context Optional context information warning message","code":""},{"path":"/reference/checkUnexpectedFields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for unexpected fields in data and warn if any are found — checkUnexpectedFields","text":"Invisibly returns character vector unexpected field names","code":""},{"path":"/reference/check_field_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a field exists in data and warn if it doesn't, then return the field value — check_field_exists","title":"Check if a field exists in data and warn if it doesn't, then return the field value — check_field_exists","text":"Check field exists data warn , return field value","code":""},{"path":"/reference/check_field_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a field exists in data and warn if it doesn't, then return the field value — check_field_exists","text":"","code":"check_field_exists(   data,   field_name,   class_name,   context = NULL,   default_value = NA )"},{"path":"/reference/check_field_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a field exists in data and warn if it doesn't, then return the field value — check_field_exists","text":"data data structure check field_name name field check class_name name class populated context Optional context information warning message default_value Value return field exist (default: NA)","code":""},{"path":"/reference/check_field_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a field exists in data and warn if it doesn't, then return the field value — check_field_exists","text":"field value exists, otherwise default_value","code":""},{"path":"/reference/check_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the value's class type, which should match at least of the types given in any_expected_class_types. — check_type","title":"Checks the value's class type, which should match at least of the types given in any_expected_class_types. — check_type","text":"Checks value's class type, match least types given any_expected_class_types.","code":""},{"path":"/reference/check_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the value's class type, which should match at least of the types given in any_expected_class_types. — check_type","text":"","code":"check_type(value, any_expected_class_types, expected_length = 0)"},{"path":"/reference/check_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the value's class type, which should match at least of the types given in any_expected_class_types. — check_type","text":"value certain value (e.g. single value, data.frame etc) any_expected_class_types vector valid class types, @p value expected_length expected length value (usually check single value); 0 (default) indicates length can ignored","code":""},{"path":"/reference/check_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks the value's class type, which should match at least of the types given in any_expected_class_types. — check_type","text":"","code":"check_type(1, \"numeric\", 1)   # TRUE #> [1] TRUE   check_type(\"1\", \"numeric\", 1) # FALSE #> [1] FALSE   check_type(1, \"numeric\", 2)   # FALSE #> [1] FALSE   check_type(\"ABC\", \"character\", 1)             # TRUE #> [1] TRUE   check_type(\"ABC\", \"character\")                # TRUE #> [1] TRUE   check_type(\"ABC\", \"character\", 2)             # FALSE #> [1] FALSE   check_type(c(\"ABC\", \"DEF\"), \"character\", 2)   # TRUE #> [1] TRUE   check_type(1.1, c(\"numeric\", \"double\"))    # TRUE #> [1] TRUE   check_type(1.1, c(\"numeric\", \"double\"), 1) # TRUE #> [1] TRUE   check_type(matrix(1:9, nrow=3), \"matrix\")   # TRUE #> [1] TRUE   check_type(data.frame(a=1:3, b=4:6), c(\"something\", \"data.frame\"))   # TRUE #> [1] TRUE"},{"path":"/reference/CV_.html","id":null,"dir":"Reference","previous_headings":"","what":"CV_ — CV_","title":"CV_ — CV_","text":"Define Singleton class can hold CV dictionary (load .obo files )","code":""},{"path":"/reference/CV_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CV_ — CV_","text":"Get full data calling 'getData()' function (returns list containing 'CV', 'URI' 'version'), 'getCV()' shorthand 'getData()$CV'. can set custom CV calling 'setData()'. default, latest release PSI-MS-CV (see getCVDictionary). Wherever need data, simply re-grab singleton using 'CV_$new()' (use convenience function getCVSingleton() outside package)","code":""},{"path":"/reference/CV_.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"CV_ — CV_","text":"R6P::Singleton -> CV_","code":""},{"path":"/reference/CV_.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"CV_ — CV_","text":"R6P::Singleton$initialize()","code":""},{"path":"/reference/CV_.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"CV_ — CV_","text":"CV_$ensureHasData() CV_$byID() CV_$setData() CV_$getData() CV_$getCV()","code":""},{"path":"/reference/CV_.html","id":"method-ensurehasdata-","dir":"Reference","previous_headings":"","what":"Method ensureHasData()","title":"CV_ — CV_","text":"Make sure CV data loaded","code":""},{"path":"/reference/CV_.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CV_ — CV_","text":"","code":"CV_$ensureHasData()"},{"path":"/reference/CV_.html","id":"method-byid-","dir":"Reference","previous_headings":"","what":"Method byID()","title":"CV_ — CV_","text":"function retrieve CV entry using ID","code":""},{"path":"/reference/CV_.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"CV_ — CV_","text":"","code":"CV_$byID(id)"},{"path":"/reference/CV_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CV_ — CV_","text":"id CV accession, e.g. 'MS:1000560'","code":""},{"path":"/reference/CV_.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"CV_ — CV_","text":"CV term, NULL ID unknown","code":""},{"path":"/reference/CV_.html","id":"method-setdata-","dir":"Reference","previous_headings":"","what":"Method setData()","title":"CV_ — CV_","text":"Set user-defined object (= list 'CV', 'URI' 'version'), obtained getCVDictionary","code":""},{"path":"/reference/CV_.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"CV_ — CV_","text":"","code":"CV_$setData(cv_data)"},{"path":"/reference/CV_.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"CV_ — CV_","text":"cv_data result call getCVDictionary","code":""},{"path":"/reference/CV_.html","id":"method-getdata-","dir":"Reference","previous_headings":"","what":"Method getData()","title":"CV_ — CV_","text":"Gets underlying data (CV, URI version)","code":""},{"path":"/reference/CV_.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"CV_ — CV_","text":"","code":"CV_$getData()"},{"path":"/reference/CV_.html","id":"method-getcv-","dir":"Reference","previous_headings":"","what":"Method getCV()","title":"CV_ — CV_","text":"shorthand 'getData()$CV', .e. CV data.frame.","code":""},{"path":"/reference/CV_.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"CV_ — CV_","text":"","code":"CV_$getCV()"},{"path":"/reference/CV_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CV_ — CV_","text":"","code":"if (FALSE) { # \\dontrun{   cv_dict = CV_$new() ## uses 'getCVDictionary()' to populate the singleton   cv_2 = CV_$new() ## uses the same data without parsing again   cv_2$setData(getCVDictionary(\"custom\", \"https://my.com/custom.obo\")) } # }"},{"path":"/reference/filenameToCV.html","id":null,"dir":"Reference","previous_headings":"","what":"For a given filename (e.g. ","title":"For a given filename (e.g. ","text":"following mapping currently known: .raw    : MS:1000563 ! Thermo RAW format .mzML   : MS:1000584 ! mzML format .mzData : MS:1000564 ! PSI mzData format .wiff   : MS:1000562 ! ABI WIFF format .pkl    : MS:1000565 ! Micromass PKL format .mzXML  : MS:1000566 ! ISB mzXML format .yep    : MS:1000567 ! Bruker/Agilent YEP format .dta    : MS:1000613 ! Sequest DTA format .mzMLb  : MS:1002838 ! mzMLb format","code":""},{"path":"/reference/filenameToCV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For a given filename (e.g. ","text":"","code":"filenameToCV(filepath)"},{"path":"/reference/filenameToCV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For a given filename (e.g. ","text":"filepath filename (optional path)","code":""},{"path":"/reference/filenameToCV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For a given filename (e.g. ","text":"CV term accession string, e.g. 'MS:1000584'","code":""},{"path":"/reference/filenameToCV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"For a given filename (e.g. ","text":"Falls back 'MS:1000560 ! mass spectrometer file format' match found. Upper/lowercase ignored, .e. \"mzML == mzml\".","code":""},{"path":"/reference/filenameToCV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For a given filename (e.g. ","text":"","code":"filenameToCV(\"test.mZmL\")  # MS:1000584 #> [1] \"MS:1000584\"   filenameToCV(\"test.raw\")  # MS:1000563 #> [1] \"MS:1000563\"   filenameToCV(c(\"test.raw\", \"bla.mzML\")) #>     test.raw     bla.mzML  #> \"MS:1000563\" \"MS:1000584\""},{"path":"/reference/fromDatatoMzQC.html","id":null,"dir":"Reference","previous_headings":"","what":"Allow conversion of plain named lists of R objects (from jSON) to mzQC objects — fromDatatoMzQC","title":"Allow conversion of plain named lists of R objects (from jSON) to mzQC objects — fromDatatoMzQC","text":"Allow conversion plain named lists R objects (jSON) mzQC objects","code":""},{"path":"/reference/fromDatatoMzQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allow conversion of plain named lists of R objects (from jSON) to mzQC objects — fromDatatoMzQC","text":"","code":"fromDatatoMzQC(mzqc_class, data, context = NULL)"},{"path":"/reference/fromDatatoMzQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allow conversion of plain named lists of R objects (from jSON) to mzQC objects — fromDatatoMzQC","text":"mzqc_class Prototype class convert 'data' data list : datastructure R lists/arrays obtained 'jsonlite::fromJSON()' context trace mzQC object tree aid users case errors","code":""},{"path":"/reference/fromDatatoMzQC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allow conversion of plain named lists of R objects (from jSON) to mzQC objects — fromDatatoMzQC","text":"","code":"data = rmzqc::MzQCcvParameter$new(\"acc\", \"myName\", \"value\")     data_recovered = rmzqc::fromDatatoMzQC(rmzqc::MzQCcvParameter,                          list(jsonlite::fromJSON(jsonlite::toJSON(data))))"},{"path":"/reference/fromDatatoMzQCobj.html","id":null,"dir":"Reference","previous_headings":"","what":"Allow conversion of a plain R object (obtained from jSON) to an mzQC object — fromDatatoMzQCobj","title":"Allow conversion of a plain R object (obtained from jSON) to an mzQC object — fromDatatoMzQCobj","text":"list elements, call fromDatatoMzQC.","code":""},{"path":"/reference/fromDatatoMzQCobj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allow conversion of a plain R object (obtained from jSON) to an mzQC object — fromDatatoMzQCobj","text":"","code":"fromDatatoMzQCobj(mzqc_class, data, context = NULL)"},{"path":"/reference/fromDatatoMzQCobj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allow conversion of a plain R object (obtained from jSON) to an mzQC object — fromDatatoMzQCobj","text":"mzqc_class Prototype class convert 'data' data datastructure R lists/arrays obtained 'jsonlite::fromJSON()' context trace mzQC object tree aid users case errors","code":""},{"path":"/reference/fromDatatoMzQCobj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allow conversion of a plain R object (obtained from jSON) to an mzQC object — fromDatatoMzQCobj","text":"","code":"data = MzQCcvParameter$new(\"acc\", \"myName\", \"value\")  data_recovered = fromDatatoMzQCobj(MzQCcvParameter, jsonlite::fromJSON(jsonlite::toJSON(data)))  data_recovered #> Reference class object of class \"MzQCcvParameter\" #> Field \"accession\": #> [1] \"acc\" #> Field \"name\": #> [1] \"myName\" #> Field \"value\": #> [1] \"value\" #> Field \"description\": #> [1] NA"},{"path":"/reference/getCVDictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch and parse the 'psi-ms.obo' and some metadata from the usual sources to use as ontology. — getCVDictionary","title":"Fetch and parse the 'psi-ms.obo' and some metadata from the usual sources to use as ontology. — getCVDictionary","text":"use_local_fallback TRUE, function never fail. Otherwise, may fail internet connection flawed internal URLs related GitHubs API become stale.","code":""},{"path":"/reference/getCVDictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch and parse the 'psi-ms.obo' and some metadata from the usual sources to use as ontology. — getCVDictionary","text":"","code":"getCVDictionary(   source = c(\"latest\", \"local\", \"custom\"),   custom_uri = NULL,   use_local_fallback = TRUE )"},{"path":"/reference/getCVDictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch and parse the 'psi-ms.obo' and some metadata from the usual sources to use as ontology. — getCVDictionary","text":"source get PSI-MS CV : - 'latest' download 'psi-ms.obo' https://api.github.com/repos/HUPO-PSI/psi-ms-CV/releases/latest - 'local' use rmzqc/cv/psi-ms.obo' (might outdated, need latest terms) - 'custom' uses user-defined URI 'custom_uri' custom_uri Used 'source' set 'custom'. URI can local remote, e.g. 'c:/obo/.obo' 'https://www.abc.com/.obo' use_local_fallback downloading file URI fails, fall back local psi-ms.obo shipped rmzqc?","code":""},{"path":"/reference/getCVDictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch and parse the 'psi-ms.obo' and some metadata from the usual sources to use as ontology. — getCVDictionary","text":"list 'CV', 'URI' 'version', 'CV' data.frame columns 'id', 'name', 'def', 'parents', 'children' (many ) contains CV entries","code":""},{"path":"/reference/getCVDictionary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch and parse the 'psi-ms.obo' and some metadata from the usual sources to use as ontology. — getCVDictionary","text":"'pato.obo', 'uo.obo' 'rmzqc/cv/' folder automatically merged result. See CV_ class use function efficiently.","code":""},{"path":"/reference/getCVInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns an MzQCcontrolledVocabulary for the currently used CV (see getCVSingleton) using getCVSingleton()$getData()$URI and $version. — getCVInfo","title":"Returns an MzQCcontrolledVocabulary for the currently used CV (see getCVSingleton) using getCVSingleton()$getData()$URI and $version. — getCVInfo","text":"Returns MzQCcontrolledVocabulary currently used CV (see getCVSingleton) using getCVSingleton()$getData()$URI $version.","code":""},{"path":"/reference/getCVInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns an MzQCcontrolledVocabulary for the currently used CV (see getCVSingleton) using getCVSingleton()$getData()$URI and $version. — getCVInfo","text":"","code":"getCVInfo()"},{"path":"/reference/getCVSingleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the CV singleton. See CV_. — getCVSingleton","title":"Returns the CV singleton. See CV_. — getCVSingleton","text":"Returns CV singleton. See CV_.","code":""},{"path":"/reference/getCVSingleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the CV singleton. See CV_. — getCVSingleton","text":"","code":"getCVSingleton()"},{"path":"/reference/getCVTemplate.html","id":null,"dir":"Reference","previous_headings":"","what":"Fills a MzQCcvParameter object with id(accession) and name. The value (if any) needs to be set afterwards. — getCVTemplate","title":"Fills a MzQCcvParameter object with id(accession) and name. The value (if any) needs to be set afterwards. — getCVTemplate","text":"Fills MzQCcvParameter object id(accession) name. value () needs set afterwards.","code":""},{"path":"/reference/getCVTemplate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fills a MzQCcvParameter object with id(accession) and name. The value (if any) needs to be set afterwards. — getCVTemplate","text":"","code":"getCVTemplate(accession, CV = getCVSingleton())"},{"path":"/reference/getCVTemplate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fills a MzQCcvParameter object with id(accession) and name. The value (if any) needs to be set afterwards. — getCVTemplate","text":"accession ID (=accession) term CV CV CV dictionary, obtained getCVDictionary(); defaults global singleton, populated automatically","code":""},{"path":"/reference/getCVTemplate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fills a MzQCcvParameter object with id(accession) and name. The value (if any) needs to be set afterwards. — getCVTemplate","text":"instance MzQCcvParameter","code":""},{"path":"/reference/getDefaultCV.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns an MzQCcontrolledVocabulary for the currently used CV (see getCVSingleton) — getDefaultCV","title":"Returns an MzQCcontrolledVocabulary for the currently used CV (see getCVSingleton) — getDefaultCV","text":"Returns MzQCcontrolledVocabulary currently used CV (see getCVSingleton)","code":""},{"path":"/reference/getDefaultCV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns an MzQCcontrolledVocabulary for the currently used CV (see getCVSingleton) — getDefaultCV","text":"","code":"getDefaultCV()"},{"path":"/reference/getDefaultCV.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Returns an MzQCcontrolledVocabulary for the currently used CV (see getCVSingleton) — getDefaultCV","text":"function deprecated soon. Use getCVInfo instead.","code":""},{"path":"/reference/getLatest_PSICV_URL.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the latest PSI-MS CV release URL — getLatest_PSICV_URL","title":"Get the latest PSI-MS CV release URL — getLatest_PSICV_URL","text":"may fail (e.g. internet connection available, URLs became invalid) 'NULL' returned instead URL. warning may emitted, URL date (.e. GitHub API changed).","code":""},{"path":"/reference/getLatest_PSICV_URL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the latest PSI-MS CV release URL — getLatest_PSICV_URL","text":"","code":"getLatest_PSICV_URL()"},{"path":"/reference/getLocal_CV_Version.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtains the 'data-version' from a local (i.e. non-url) PSI-MS-CV — getLocal_CV_Version","title":"Obtains the 'data-version' from a local (i.e. non-url) PSI-MS-CV — getLocal_CV_Version","text":"Obtains 'data-version' local (.e. non-url) PSI-MS-CV","code":""},{"path":"/reference/getLocal_CV_Version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtains the 'data-version' from a local (i.e. non-url) PSI-MS-CV — getLocal_CV_Version","text":"","code":"getLocal_CV_Version(local_PSIMS_obo_file)"},{"path":"/reference/getLocal_CV_Version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtains the 'data-version' from a local (i.e. non-url) PSI-MS-CV — getLocal_CV_Version","text":"local_PSIMS_obo_file path local file, e.g. 'c:/temp/.obo'","code":""},{"path":"/reference/getLocal_CV_Version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtains the 'data-version' from a local (i.e. non-url) PSI-MS-CV — getLocal_CV_Version","text":"","code":"getLocal_CV_Version(system.file(\"./cv/psi-ms.obo\", package=\"rmzqc\")) # \"4.1.95\" #> [1] \"4.1.193\""},{"path":"/reference/getOptionalValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an optional value from data, using a default if not present — getOptionalValue","title":"Get an optional value from data, using a default if not present — getOptionalValue","text":"Use function optional fields warning generated missing.","code":""},{"path":"/reference/getOptionalValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an optional value from data, using a default if not present — getOptionalValue","text":"","code":"getOptionalValue(data, field_name, default_value = NA)"},{"path":"/reference/getOptionalValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an optional value from data, using a default if not present — getOptionalValue","text":"data data structure extract field_name name field extract default_value Value return field exist","code":""},{"path":"/reference/getOptionalValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an optional value from data, using a default if not present — getOptionalValue","text":"field value exists, otherwise default_value","code":""},{"path":"/reference/getQualityMetricTemplate.html","id":null,"dir":"Reference","previous_headings":"","what":"Fills a MzQCqualityMetric object with id(accession) and name. The value (if any) and unit (if any) need to be set afterwards. — getQualityMetricTemplate","title":"Fills a MzQCqualityMetric object with id(accession) and name. The value (if any) and unit (if any) need to be set afterwards. — getQualityMetricTemplate","text":"accession must valid (allow_unknown_id must TRUE)","code":""},{"path":"/reference/getQualityMetricTemplate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fills a MzQCqualityMetric object with id(accession) and name. The value (if any) and unit (if any) need to be set afterwards. — getQualityMetricTemplate","text":"","code":"getQualityMetricTemplate(   accession,   CV = getCVSingleton(),   allow_unknown_id = FALSE )"},{"path":"/reference/getQualityMetricTemplate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fills a MzQCqualityMetric object with id(accession) and name. The value (if any) and unit (if any) need to be set afterwards. — getQualityMetricTemplate","text":"accession ID (=accession) term CV CV CV dictionary, obtained getCVDictionary(); defaults global singleton, populated automatically allow_unknown_id Allows invalid accession; 'FALSE' function errors accession unknown","code":""},{"path":"/reference/getQualityMetricTemplate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fills a MzQCqualityMetric object with id(accession) and name. The value (if any) and unit (if any) need to be set afterwards. — getQualityMetricTemplate","text":"instance MzQCqualityMetric","code":""},{"path":"/reference/getSyntaxValidator.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a syntax validator for mzQC — getSyntaxValidator","title":"Get a syntax validator for mzQC — getSyntaxValidator","text":"Get syntax validator mzQC","code":""},{"path":"/reference/getSyntaxValidator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a syntax validator for mzQC — getSyntaxValidator","text":"","code":"getSyntaxValidator()"},{"path":"/reference/hasFileSuffix.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if filepath ends in suffix (ignoring lower/upper case differences). If suffix does not start with a '.' it is prepended automatically. — hasFileSuffix","title":"Checks if filepath ends in suffix (ignoring lower/upper case differences). If suffix does not start with a '.' it is prepended automatically. — hasFileSuffix","text":"Checks filepath ends suffix (ignoring lower/upper case differences). suffix start '.' prepended automatically.","code":""},{"path":"/reference/hasFileSuffix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if filepath ends in suffix (ignoring lower/upper case differences). If suffix does not start with a '.' it is prepended automatically. — hasFileSuffix","text":"","code":"hasFileSuffix(filepath, suffix)"},{"path":"/reference/hasFileSuffix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if filepath ends in suffix (ignoring lower/upper case differences). If suffix does not start with a '.' it is prepended automatically. — hasFileSuffix","text":"filepath relative absolute path file, whose suffix checked suffix suffix expect ('.' prepended internally missing)","code":""},{"path":"/reference/hasFileSuffix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if filepath ends in suffix (ignoring lower/upper case differences). If suffix does not start with a '.' it is prepended automatically. — hasFileSuffix","text":"TRUE yes, FALSE otherwise","code":""},{"path":"/reference/hasFileSuffix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if filepath ends in suffix (ignoring lower/upper case differences). If suffix does not start with a '.' it is prepended automatically. — hasFileSuffix","text":"","code":"hasFileSuffix(\"bla.txt\", \"txt\")    # TRUE #> [1] TRUE   hasFileSuffix(\"bla.txt\", \".txt\")   # TRUE #> [1] TRUE   hasFileSuffix(\"bla.txt\", \".TXT\")   # TRUE #> [1] TRUE   hasFileSuffix(\"foo\", \"\")           # TRUE #> [1] TRUE   hasFileSuffix(\"\", \"\")              # TRUE #> [1] TRUE   hasFileSuffix(\"bla.txt\", \"doc\")    # FALSE #> [1] FALSE   hasFileSuffix(\"bla.txt\", \".doc\")   # FALSE #> [1] FALSE   hasFileSuffix(\"fo\", \".doc\")        # FALSE #> [1] FALSE   hasFileSuffix(\"\", \".doc\")          # FALSE #> [1] FALSE"},{"path":"/reference/isUndefined.html","id":null,"dir":"Reference","previous_headings":"","what":"Tell if a variable's value is undefined (NA or NULL); If yes, and it is required by the mzQC standard, we can raise an error. — isUndefined","title":"Tell if a variable's value is undefined (NA or NULL); If yes, and it is required by the mzQC standard, we can raise an error. — isUndefined","text":"can pass multiple variable, checked. undefined, function returns TRUE","code":""},{"path":"/reference/isUndefined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tell if a variable's value is undefined (NA or NULL); If yes, and it is required by the mzQC standard, we can raise an error. — isUndefined","text":"","code":"isUndefined(s, ..., verbose = TRUE, context = NULL)"},{"path":"/reference/isUndefined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tell if a variable's value is undefined (NA or NULL); If yes, and it is required by the mzQC standard, we can raise an error. — isUndefined","text":"s variable checked NA/NULL ... variable checked verbose TRUE 's' NULL/NA, print name variable passed context optional string using within warning message, ease tracking mzQC structure undefined value occurs","code":""},{"path":"/reference/isUndefined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tell if a variable's value is undefined (NA or NULL); If yes, and it is required by the mzQC standard, we can raise an error. — isUndefined","text":"","code":"isUndefined(NA)       ## TRUE #> Warning: Variable 'NA' is NA/NULL #> [1] TRUE isUndefined(NULL)     ## TRUE #> Warning: Variable 'NULL' is NA/NULL #> [1] TRUE isUndefined(NA, NULL) ## TRUE #> Warning: Variable 'NA' is NA/NULL #> Warning: Variable 'NULL' is NA/NULL #> [1] TRUE isUndefined(\"\")       ## FALSE #> [1] FALSE isUndefined(list(1,2,3)) ## FALSE #> [1] FALSE isUndefined(\"\", NA)   ## TRUE #> Warning: Variable 'NA' is NA/NULL #> [1] TRUE isUndefined(NA, \"\")   ## TRUE #> Warning: Variable 'NA' is NA/NULL #> [1] TRUE isUndefined(1)        ## FALSE #> [1] FALSE myVar = NA isUndefined(myVar)    ## TRUE, with warning \"Variable 'myVar' is NA/NULL!\" #> Warning: Variable 'myVar' is NA/NULL #> [1] TRUE"},{"path":"/reference/isValidMzQC.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks validity (= completeness) of mzQC objects - or lists (JSON arrays) thereof — isValidMzQC","title":"Checks validity (= completeness) of mzQC objects - or lists (JSON arrays) thereof — isValidMzQC","text":"Note: Returns TRUE empty lists!","code":""},{"path":"/reference/isValidMzQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks validity (= completeness) of mzQC objects - or lists (JSON arrays) thereof — isValidMzQC","text":"","code":"isValidMzQC(x, parent_context = NULL)"},{"path":"/reference/isValidMzQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks validity (= completeness) of mzQC objects - or lists (JSON arrays) thereof — isValidMzQC","text":"x mzQC refclass (list ), subjected validation parent_context Internal parameter used track path nested validations","code":""},{"path":"/reference/isValidMzQC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checks validity (= completeness) of mzQC objects - or lists (JSON arrays) thereof — isValidMzQC","text":"function checks mzQC object list mzQC objects valid. lists, elements need valid function return TRUE. function provides detailed error messages include path invalid field, making easier identify validation issues complex nested structures.","code":""},{"path":"/reference/isValidMzQC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks validity (= completeness) of mzQC objects - or lists (JSON arrays) thereof — isValidMzQC","text":"","code":"isValidMzQC(MzQCcvParameter$new(\"MS:4000059\"))       # FALSE #> Warning: MzQCcvParameter$name is NA/NULL #> [1] FALSE   isValidMzQC(MzQCcvParameter$new(\"MS:4000059\", \"Number of MS1 spectra\")) # TRUE #> [1] TRUE   isValidMzQC(list(MzQCcvParameter$new(\"MS:4000059\"))) # FALSE #> Warning: [1]$MzQCcvParameter$name is NA/NULL #> [1] FALSE   isValidMzQC(list(MzQCcvParameter$new(\"MS:4000059\", \"Number of MS1 spectra\"))) # TRUE #> [1] TRUE"},{"path":"/reference/localFileToURI.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a local filename, e.g. ","title":"Convert a local filename, e.g. ","text":"Relative filenames made absolute. Backslashes path separators replaced forward slashes (commonly seen Windows).","code":""},{"path":"/reference/localFileToURI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a local filename, e.g. ","text":"","code":"localFileToURI(local_filename, must_exist = TRUE)"},{"path":"/reference/localFileToURI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a local filename, e.g. ","text":"local_filename Path file (can relative current getwd(); absolute) must_exist Require file exist","code":""},{"path":"/reference/localFileToURI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a local filename, e.g. ","text":"URI starting \"file:///\" followed absolute path","code":""},{"path":"/reference/MzQCanalysisSoftware-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Details of the software used to create the QC metrics — MzQCanalysisSoftware-class","title":"Details of the software used to create the QC metrics — MzQCanalysisSoftware-class","text":"Details software used create QC metrics","code":""},{"path":"/reference/MzQCanalysisSoftware-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Details of the software used to create the QC metrics — MzQCanalysisSoftware-class","text":"accession Accession number identifying term within controlled vocabulary. name Name controlled vocabulary term describing software tool. version Version number software tool. uri Publicly accessible URI software tool documentation. description (optional) Definition controlled vocabulary term. value (optional) Name software tool.","code":""},{"path":"/reference/MzQCbaseQuality-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Base class of runQuality/setQuality — MzQCbaseQuality-class","title":"Base class of runQuality/setQuality — MzQCbaseQuality-class","text":"Base class runQuality/setQuality","code":""},{"path":"/reference/MzQCbaseQuality-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Base class of runQuality/setQuality — MzQCbaseQuality-class","text":"metadata metadata run/setQuality qualityMetrics Array MzQCqualityMetric objects","code":""},{"path":"/reference/MzQCbaseQuality_getMetric.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a certain metric from a runQuality's list of MzQCqualityMetric — MzQCbaseQuality_getMetric","title":"Extract a certain metric from a runQuality's list of MzQCqualityMetric — MzQCbaseQuality_getMetric","text":"must provide either accession name metric, .","code":""},{"path":"/reference/MzQCbaseQuality_getMetric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a certain metric from a runQuality's list of MzQCqualityMetric — MzQCbaseQuality_getMetric","text":"accession Accession MzQCqualityMetric name Name MzQCqualityMetric (less stable accession)","code":""},{"path":"/reference/MzQCbaseQuality_getMetric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a certain metric from a runQuality's list of MzQCqualityMetric — MzQCbaseQuality_getMetric","text":"list MzQCqualityMetric's match.","code":""},{"path":"/reference/MzQCbaseQuality_getMetric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a certain metric from a runQuality's list of MzQCqualityMetric — MzQCbaseQuality_getMetric","text":"Usually one MzQCqualityMetric matches, however, function return matches. Note: function stop() results found","code":""},{"path":"/reference/MzQCcontrolledVocabulary-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A controlled vocabulary document, usually pointing to an .obo file — MzQCcontrolledVocabulary-class","title":"A controlled vocabulary document, usually pointing to an .obo file — MzQCcontrolledVocabulary-class","text":"controlled vocabulary document, usually pointing .obo file","code":""},{"path":"/reference/MzQCcontrolledVocabulary-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"A controlled vocabulary document, usually pointing to an .obo file — MzQCcontrolledVocabulary-class","text":"name Full name controlled vocabulary. uri Publicly accessible URI controlled vocabulary. version (optional) Version controlled vocabulary.","code":""},{"path":"/reference/MzQCcontrolledVocabulary-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A controlled vocabulary document, usually pointing to an .obo file — MzQCcontrolledVocabulary-class","text":"","code":"MzQCcontrolledVocabulary$new(     \"Proteomics Standards Initiative Quality Control Ontology\",     \"https://github.com/HUPO-PSI/psi-ms-CV/releases/download/v4.1.129/psi-ms.obo\",     \"4.1.129\") #> Reference class object of class \"MzQCcontrolledVocabulary\" #> Field \"name\": #> [1] \"Proteomics Standards Initiative Quality Control Ontology\" #> Field \"uri\": #> [1] \"https://github.com/HUPO-PSI/psi-ms-CV/releases/download/v4.1.129/psi-ms.obo\" #> Field \"version\": #> [1] \"4.1.129\""},{"path":"/reference/MzQCcvParameter-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A controlled vocabulary parameter, as detailed in the OBO file — MzQCcvParameter-class","title":"A controlled vocabulary parameter, as detailed in the OBO file — MzQCcvParameter-class","text":"controlled vocabulary parameter, detailed OBO file","code":""},{"path":"/reference/MzQCcvParameter-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"A controlled vocabulary parameter, as detailed in the OBO file — MzQCcvParameter-class","text":"accession Accession number identifying term within controlled vocabulary. name Name controlled vocabulary term describing parameter. value (optional) Value parameter. description (optional) Definition controlled vocabulary term.","code":""},{"path":"/reference/MzQCcvParameter-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A controlled vocabulary parameter, as detailed in the OBO file — MzQCcvParameter-class","text":"","code":"MzQCcvParameter$new(\"MS:4000070\",                       \"retention time acquisition range\",                       c(0.2959, 5969.8172)) #> Reference class object of class \"MzQCcvParameter\" #> Field \"accession\": #> [1] \"MS:4000070\" #> Field \"name\": #> [1] \"retention time acquisition range\" #> Field \"value\": #> [1]    0.2959 5969.8172 #> Field \"description\": #> [1] NA   isValidMzQC(MzQCcvParameter$new(\"MS:0000000\")) #> Warning: MzQCcvParameter$name is NA/NULL #> [1] FALSE"},{"path":"/reference/MzQCDateTime-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An mzQC-formatted date+time in ISO8601 format, as required by the mzQC spec doc. — MzQCDateTime-class","title":"An mzQC-formatted date+time in ISO8601 format, as required by the mzQC spec doc. — MzQCDateTime-class","text":"format \"%Y-%m-%dT%H:%M:%S\".","code":""},{"path":"/reference/MzQCDateTime-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"An mzQC-formatted date+time in ISO8601 format, as required by the mzQC spec doc. — MzQCDateTime-class","text":"datetime correctly formatted date time (use read-)","code":""},{"path":"/reference/MzQCDateTime-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An mzQC-formatted date+time in ISO8601 format, as required by the mzQC spec doc. — MzQCDateTime-class","text":"","code":"dt1 = MzQCDateTime$new(\"1900-01-01\")  ## yields \"1900-01-01T00:00:00Z\"    dt2 = MzQCDateTime$new(Sys.time())    ## test faulty input    ## errors with 'character string is not in a standard unambiguous format'    try(MzQCDateTime$new('lala'), silent=TRUE)    ## test roundtrip conversion from/to JSON    dt2$fromData(jsonlite::fromJSON(jsonlite::toJSON(dt1))) #> Reference class object of class \"MzQCDateTime\" #> Field \"datetime\": #> [1] \"1900-01-01T00:00:00Z\""},{"path":"/reference/MzQCinputFile-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An inputfile within metadata for a run/setQuality — MzQCinputFile-class","title":"An inputfile within metadata for a run/setQuality — MzQCinputFile-class","text":"inputfile within metadata run/setQuality","code":""},{"path":"/reference/MzQCinputFile-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"An inputfile within metadata for a run/setQuality — MzQCinputFile-class","text":"name name MUST uniquely match location (specified ) listed mzQC file. location Unique file location, REQUIRED specified URI. file URI RECOMMENDED publicly accessible. fileFormat MzQCcvParameter 'accession' 'name'. fileProperties array MzQCcvParameter, usually 'accession', 'name' 'value'. Recommended least two entries: ) Completion time input file (MS:1000747) b) Checksum input file (child : MS:1000561 ! data file checksum type).","code":""},{"path":"/reference/MzQCmetadata-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The metadata for a run/setQuality — MzQCmetadata-class","title":"The metadata for a run/setQuality — MzQCmetadata-class","text":"metadata run/setQuality","code":""},{"path":"/reference/MzQCmetadata-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"The metadata for a run/setQuality — MzQCmetadata-class","text":"label Unique name run (runQuality) set (setQuality). inputFiles Array/list MzQCinputFile objects analysisSoftware Array/list MzQCanalysisSoftware objects cvParameters (optional) Array cvParameters objects","code":""},{"path":"/reference/MzQCmzQC-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Root element of an mzQC document — MzQCmzQC-class","title":"Root element of an mzQC document — MzQCmzQC-class","text":"least one runQualities setQualities MUST present.","code":""},{"path":"/reference/MzQCmzQC-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"Root element of an mzQC document — MzQCmzQC-class","text":"version Version mzQC format. creationDate Creation date mzQC file. contactName Name operator/creator mzQC file. contactAddress Contact address (mail/e-mail phone) description Description comments mzQC file contents. runQualities Array MzQCrunQuality; setQualities Array MzQCsetQuality controlledVocabularies Array CV domains used (obo files)","code":""},{"path":"/reference/MzQCqualityMetric-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The central class to store QC information — MzQCqualityMetric-class","title":"The central class to store QC information — MzQCqualityMetric-class","text":"central class store QC information","code":""},{"path":"/reference/MzQCqualityMetric-class.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"The central class to store QC information — MzQCqualityMetric-class","text":"accession Accession number identifying term within controlled vocabulary. name Name controlled vocabulary element describing metric. description (optional) Definition controlled vocabulary term. value (optional) Value metric (single value, n-tuple, table, matrix). structure checked mzQC implementation must handled caller, see toQCMetric. unit (optional) Array unit(s), stored MzQcvParameter","code":""},{"path":"/reference/MzQCrunQuality-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A runQuality object. Use to report metrics for individual runs which are independent of other runs. — MzQCrunQuality-class","title":"A runQuality object. Use to report metrics for individual runs which are independent of other runs. — MzQCrunQuality-class","text":"object alias MzQCbaseQuality.","code":""},{"path":"/reference/MzQCsetQuality-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A setQuality object. Use it for metrics which are specific to sets, i.e. only for values which only make sense in the set context and cannot be stored as runQuality (see mzQC spec doc). — MzQCsetQuality-class","title":"A setQuality object. Use it for metrics which are specific to sets, i.e. only for values which only make sense in the set context and cannot be stored as runQuality (see mzQC spec doc). — MzQCsetQuality-class","text":"object alias MzQCbaseQuality.","code":""},{"path":"/reference/NULL_to_charNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a NULL to NA_character_; or returns the argument unchanged otherwise — NULL_to_charNA","title":"Converts a NULL to NA_character_; or returns the argument unchanged otherwise — NULL_to_charNA","text":"useful missing list elements (returns NULL), missing element refClass NA_character_ (NULL return error)","code":""},{"path":"/reference/NULL_to_charNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a NULL to NA_character_; or returns the argument unchanged otherwise — NULL_to_charNA","text":"","code":"NULL_to_charNA(char_or_NULL)"},{"path":"/reference/NULL_to_charNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a NULL to NA_character_; or returns the argument unchanged otherwise — NULL_to_charNA","text":"char_or_NULL string NULL","code":""},{"path":"/reference/NULL_to_charNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a NULL to NA_character_; or returns the argument unchanged otherwise — NULL_to_charNA","text":"","code":"NULL_to_charNA(NA)   ## NA #> [1] NA   NULL_to_charNA(NULL) ## NA_character_ #> [1] NA   NULL_to_charNA(\"hi\") ## \"hi\" #> [1] \"hi\""},{"path":"/reference/NULL_to_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a NULL to NA; or returns the argument unchanged otherwise — NULL_to_NA","title":"Converts a NULL to NA; or returns the argument unchanged otherwise — NULL_to_NA","text":"useful missing list elements (returns NULL), missing element refClass NA (NULL return error)","code":""},{"path":"/reference/NULL_to_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a NULL to NA; or returns the argument unchanged otherwise — NULL_to_NA","text":"","code":"NULL_to_NA(var_or_NULL)"},{"path":"/reference/NULL_to_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a NULL to NA; or returns the argument unchanged otherwise — NULL_to_NA","text":"var_or_NULL variable kind NULL","code":""},{"path":"/reference/NULL_to_NA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a NULL to NA; or returns the argument unchanged otherwise — NULL_to_NA","text":"","code":"NULL_to_NA(NA)   ## NA #> [1] NA   NULL_to_NA(NULL) ## NA #> [1] NA   NULL_to_NA(\"hi\") ## \"hi\" #> [1] \"hi\""},{"path":"/reference/parseOBO.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the information of each CV term from an obo file. — parseOBO","title":"Get the information of each CV term from an obo file. — parseOBO","text":"Get information CV term obo file.","code":""},{"path":"/reference/parseOBO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the information of each CV term from an obo file. — parseOBO","text":"","code":"parseOBO(cv_obo_file)"},{"path":"/reference/parseOBO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the information of each CV term from an obo file. — parseOBO","text":"cv_obo_file local path .obo file","code":""},{"path":"/reference/parseOBO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the information of each CV term from an obo file. — parseOBO","text":"data.frame containing CV term information","code":""},{"path":"/reference/readMZQC.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a JSON file in mzQC format into an MzQCmzQC root object — readMZQC","title":"Read a JSON file in mzQC format into an MzQCmzQC root object — readMZQC","text":"Read JSON file mzQC format MzQCmzQC root object","code":""},{"path":"/reference/readMZQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a JSON file in mzQC format into an MzQCmzQC root object — readMZQC","text":"","code":"readMZQC(filepath)"},{"path":"/reference/readMZQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a JSON file in mzQC format into an MzQCmzQC root object — readMZQC","text":"filepath filename (path) read .","code":""},{"path":"/reference/readMZQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a JSON file in mzQC format into an MzQCmzQC root object — readMZQC","text":"MzQCmzQC root object data can extracted/manipulated","code":""},{"path":"/reference/readMZQCFromJSON.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a JSON object in mzQC format into an MzQCmzQC root object — readMZQCFromJSON","title":"Read a JSON object in mzQC format into an MzQCmzQC root object — readMZQCFromJSON","text":"Read JSON object mzQC format MzQCmzQC root object","code":""},{"path":"/reference/readMZQCFromJSON.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a JSON object in mzQC format into an MzQCmzQC root object — readMZQCFromJSON","text":"","code":"readMZQCFromJSON(json_obj)"},{"path":"/reference/readMZQCFromJSON.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a JSON object in mzQC format into an MzQCmzQC root object — readMZQCFromJSON","text":"json_obj generic R object (list lists...)","code":""},{"path":"/reference/readMZQCFromJSON.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a JSON object in mzQC format into an MzQCmzQC root object — readMZQCFromJSON","text":"MzQCmzQC root object data can extracted/manipulated","code":""},{"path":"/reference/removeFileSuffix.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes the last suffix (including the last dot) from a filename. If no dot exists, the full string is returned. — removeFileSuffix","title":"Removes the last suffix (including the last dot) from a filename. If no dot exists, the full string is returned. — removeFileSuffix","text":"Removes last suffix (including last dot) filename. dot exists, full string returned.","code":""},{"path":"/reference/removeFileSuffix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes the last suffix (including the last dot) from a filename. If no dot exists, the full string is returned. — removeFileSuffix","text":"","code":"removeFileSuffix(filepath)"},{"path":"/reference/removeFileSuffix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes the last suffix (including the last dot) from a filename. If no dot exists, the full string is returned. — removeFileSuffix","text":"filepath filename (optional path – retained)","code":""},{"path":"/reference/removeFileSuffix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes the last suffix (including the last dot) from a filename. If no dot exists, the full string is returned. — removeFileSuffix","text":"input removed suffix","code":""},{"path":"/reference/removeFileSuffix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes the last suffix (including the last dot) from a filename. If no dot exists, the full string is returned. — removeFileSuffix","text":"","code":"removeFileSuffix(\"test.tar.gz\")  # --> 'test.tar' #> [1] \"test.tar\"  removeFileSuffix(\"test.mzML\")  # --> 'test' #> [1] \"test\"  removeFileSuffix(\"/path/to/test.mzML\")  # --> '/path/to/test' #> [1] \"/path/to/test\"  removeFileSuffix(\"test_no_dot\")  # --> 'test_no_dot' #> [1] \"test_no_dot\""},{"path":"/reference/removeIfExists.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a file, if it exists (useful for temporary files which may or may not have been created) — removeIfExists","title":"Remove a file, if it exists (useful for temporary files which may or may not have been created) — removeIfExists","text":"Remove file, exists (useful temporary files may may created)","code":""},{"path":"/reference/removeIfExists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a file, if it exists (useful for temporary files which may or may not have been created) — removeIfExists","text":"","code":"removeIfExists(tmp_filename)"},{"path":"/reference/removeIfExists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a file, if it exists (useful for temporary files which may or may not have been created) — removeIfExists","text":"tmp_filename path local file","code":""},{"path":"/reference/removeIfExists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a file, if it exists (useful for temporary files which may or may not have been created) — removeIfExists","text":"NULL file missing, otherwise TRUE/FALSE depening successful removal","code":""},{"path":"/reference/rmzqc-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rmzqc: Creation, Reading and Validation of 'mzqc' Files — rmzqc-package","title":"rmzqc: Creation, Reading and Validation of 'mzqc' Files — rmzqc-package","text":"Reads, writes validates 'mzQC' files. 'mzQC' format standardized file format exchange, transmission, archiving quality metrics derived biological mass spectrometry data, defined HUPO-PSI (Human Proteome Organisation - Proteomics Standards Initiative) Quality Control working group. See https://hupo-psi.github.io/mzQC/ details.","code":""},{"path":[]},{"path":"/reference/rmzqc-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rmzqc: Creation, Reading and Validation of 'mzqc' Files — rmzqc-package","text":"Maintainer: Chris Bielow chris.bielow@bsc.fu-berlin.de (ORCID) contributors: David Jimenez-Morales biodavidjm@gmail.com (ORCID) [reviewer, contributor]","code":""},{"path":"/reference/toAnalysisSoftware.html","id":null,"dir":"Reference","previous_headings":"","what":"From an ID, e.g. ","title":"From an ID, e.g. ","text":"ID, e.g. \"MS:1003162\" (PTX-QC), additional information, create 'analysisSoftware' node mzQC","code":""},{"path":"/reference/toAnalysisSoftware.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"From an ID, e.g. ","text":"","code":"toAnalysisSoftware(id, version = \"unknown\", uri = NULL, value = NA_character_)"},{"path":"/reference/toAnalysisSoftware.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"From an ID, e.g. ","text":"id CV accession version version tool created metric/mzQC uri URI homepage, NULL (default), extracted definition PSI MS-CV (possible) value optional name software (different CV's name)","code":""},{"path":"/reference/toAnalysisSoftware.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"From an ID, e.g. ","text":"MzQCanalysisSoftware object","code":""},{"path":"/reference/toAnalysisSoftware.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"From an ID, e.g. ","text":"","code":"# use 'version = packageVersion(\"PTXQC\")' if the package is installed  toAnalysisSoftware(id = \"MS:1003162\", version = \"1.0.12\") #> Downloading obo from 'https://github.com/HUPO-PSI/psi-ms-CV/releases/download/v4.1.194/psi-ms.obo' ... #> Reference class object of class \"MzQCanalysisSoftware\" #> Field \"accession\": #> [1] \"MS:1003162\" #> Field \"name\": #> [1] \"PTX-QC\" #> Field \"version\": #> [1] \"1.0.12\" #> Field \"uri\": #> [1] \"https://github.com/cbielow/PTXQC/\" #> Field \"description\": #> [1] \"\\\"Proteomics (PTX) - QualityControl (QC) software for QC report generation and visualization.\\\" [DOI:10.1021/acs.jproteome.5b00780, PMID:26653327, https://github.com/cbielow/PTXQC/]\" #> Field \"value\": #> [1] NA"},{"path":"/reference/toQCMetric.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an 'MzQCqualityMetric' object from two inputs (id and value). — toQCMetric","title":"Create an 'MzQCqualityMetric' object from two inputs (id and value). — toQCMetric","text":"Create 'MzQCqualityMetric' object two inputs (id value).","code":""},{"path":"/reference/toQCMetric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an 'MzQCqualityMetric' object from two inputs (id and value). — toQCMetric","text":"","code":"toQCMetric(   id,   value,   on_violation = c(\"error\", \"warn\"),   allow_unknown_id = FALSE )"},{"path":"/reference/toQCMetric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an 'MzQCqualityMetric' object from two inputs (id and value). — toQCMetric","text":"id CV accession value data, computed QC software required format. on_violation 'value' correct type (according given 'id')? Default: \"error\"; \"warn\" allow_unknown_id Allows invalid accession, also check value type; 'FALSE' function errors","code":""},{"path":"/reference/toQCMetric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an 'MzQCqualityMetric' object from two inputs (id and value). — toQCMetric","text":"MzQCanalysisSoftware object","code":""},{"path":"/reference/toQCMetric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an 'MzQCqualityMetric' object from two inputs (id and value). — toQCMetric","text":"inputs : ID QC metric, e.g. \"MS:4000059\" (number MS1 spectra) value value must correct format depending metric. value type (see ) checked (warning/error given mismatching): following requirements values apply: single value: R single value; unit deduced CVs 'has_units' n-tuple: R vector, e.g. using c(1,2,3), .e. values type; unit deduced CVs 'has_units' table:  R list(); columns defined using CVs 'has_column' must present (warning/error given otherwise) matrix: R matrix, .e. values type; unit deduced CVs 'has_units' Upon violation value type (e.g. data.frame instead single value), error warning emitted (see @p on_violation):","code":"toQCMetric(id = \"MS:4000059\", value = data.frame(n = 1)) # errors: wrong value format"},{"path":"/reference/toQCMetric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an 'MzQCqualityMetric' object from two inputs (id and value). — toQCMetric","text":"","code":"## single value    toQCMetric(id = \"MS:4000059\", value = 13405) # number of MS1 spectra #> Reference class object of class \"MzQCqualityMetric\" #> Field \"accession\": #> [1] \"MS:4000059\" #> Field \"name\": #> [1] \"number of MS1 spectra\" #> Field \"description\": #> [1] \"\\\"The number of MS1 events in the run.\\\" [PSI:MS]\" #> Field \"value\": #> [1] 13405 #> Field \"unit\": #> list()     ## n-tuple    toQCMetric(id = \"MS:4000051\", value = c(31.3, 35.99, 38.44)) # XIC-FWHM quantiles #> Reference class object of class \"MzQCqualityMetric\" #> Field \"accession\": #> [1] \"MS:4000051\" #> Field \"name\": #> [1] \"XIC-FWHM quantiles\" #> Field \"description\": #> [1] \"\\\"The first to n-th quantile of peak widths for XICs. A metric's value triplet represents the related QuaMeter metrics of XIC-FWHM-Q1,Q2,Q3.\\\" [PSI:MS]\" #> Field \"value\": #> [1] 31.30 35.99 38.44 #> Field \"unit\": #> list()     ## table    toQCMetric(id = \"MS:4000063\",  # MS2 known precursor charges fractions               value = list(\"MS:1000041\" = 1:3,                            \"UO:0000191\" = c(0.7, 0.6, 0.8))) #> Reference class object of class \"MzQCqualityMetric\" #> Field \"accession\": #> [1] \"MS:4000063\" #> Field \"name\": #> [1] \"MS2 known precursor charges fractions\" #> Field \"description\": #> [1] \"\\\"The fraction of MS/MS precursors of the corresponding charge. The fractions [0,1] are given in the 'Fraction' column, corresponding charges in the 'Charge state' column. The highest charge state is to be interpreted as that charge state or higher.\\\" [PSI:MS]\" #> Field \"value\": #> $`MS:1000041` #> [1] 1 2 3 #>  #> $`UO:0000191` #> [1] 0.7 0.6 0.8 #>  #> Field \"unit\": #> list()     ## test an invalid CV accession/id    toQCMetric(id = \"MS:0000\", value = \"ID_is_not_valid\", allow_unknown_id = TRUE) #> Warning: Could not find id 'MS:0000' in CV list (length: 6807) #> Reference class object of class \"MzQCqualityMetric\" #> Field \"accession\": #> [1] \"MS:0000\" #> Field \"name\": #> character(0) #> Field \"description\": #> character(0) #> Field \"value\": #> [1] \"ID_is_not_valid\" #> Field \"unit\": #> list()     # \\donttest{    ## matrix (MS:4000006): there is no example in the CV yet, so this cannot be tested)    #toQCMetric(id = \"MS:400000?\", value = matrix(1:12, nrow = 3, ncol = 4)) # ???     # does not work since the 'id' is not derived from a valid value type    #toQCMetric(id = \"MS:0000000\", value = \"ID_is_not_valid\")     # does not work, since the ID is unknown and 'allow_unknown_id' is FALSE by default    #toQCMetric(id = \"MS:0000\", value = \"ID_is_not_valid\")    # }"},{"path":"/reference/validateFromFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Syntactically validates an mzQC document which is present as a file. — validateFromFile","title":"Syntactically validates an mzQC document which is present as a file. — validateFromFile","text":"returned TRUE/FALSE additional attributes case errors. Use attributes(result) access .","code":""},{"path":"/reference/validateFromFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Syntactically validates an mzQC document which is present as a file. — validateFromFile","text":"","code":"validateFromFile(filepath, verbose = TRUE)"},{"path":"/reference/validateFromFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Syntactically validates an mzQC document which is present as a file. — validateFromFile","text":"filepath path file (e.g. \"c:/.mzQC\", \"test.mzQC\") verbose Show extra information validation fails","code":""},{"path":"/reference/validateFromFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Syntactically validates an mzQC document which is present as a file. — validateFromFile","text":"TRUE/FALSE validation successful/failed","code":""},{"path":"/reference/validateFromObj.html","id":null,"dir":"Reference","previous_headings":"","what":"Syntactically validates an mzQC document which is already in memory as mzQC root object, as obtained by, e.g. readMZQC(). — validateFromObj","title":"Syntactically validates an mzQC document which is already in memory as mzQC root object, as obtained by, e.g. readMZQC(). — validateFromObj","text":"method less performant validateFromString, needs convert R object JSON string first.","code":""},{"path":"/reference/validateFromObj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Syntactically validates an mzQC document which is already in memory as mzQC root object, as obtained by, e.g. readMZQC(). — validateFromObj","text":"","code":"validateFromObj(mzqc_root, verbose = TRUE)"},{"path":"/reference/validateFromObj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Syntactically validates an mzQC document which is already in memory as mzQC root object, as obtained by, e.g. readMZQC(). — validateFromObj","text":"mzqc_root mzQC root object verbose Show extra information validation fails","code":""},{"path":"/reference/validateFromObj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Syntactically validates an mzQC document which is already in memory as mzQC root object, as obtained by, e.g. readMZQC(). — validateFromObj","text":"TRUE/FALSE validation successful/failed","code":""},{"path":"/reference/validateFromObj.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Syntactically validates an mzQC document which is already in memory as mzQC root object, as obtained by, e.g. readMZQC(). — validateFromObj","text":"returned TRUE/FALSE additional attributes case errors. Use attributes(result) access .","code":""},{"path":"/reference/validateFromString.html","id":null,"dir":"Reference","previous_headings":"","what":"Syntactically validates an mzQC document which is already in memory as JSON string. e.g. the string ","title":"Syntactically validates an mzQC document which is already in memory as JSON string. e.g. the string ","text":"string object passed function contains multiple elements (length > 1). concatenated using '\\n' validation.","code":""},{"path":"/reference/validateFromString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Syntactically validates an mzQC document which is already in memory as JSON string. e.g. the string ","text":"","code":"validateFromString(JSON_string, verbose = TRUE)"},{"path":"/reference/validateFromString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Syntactically validates an mzQC document which is already in memory as JSON string. e.g. the string ","text":"JSON_string string contains JSON (multiple lines allowed) verbose Show extra information validation fails","code":""},{"path":"/reference/validateFromString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Syntactically validates an mzQC document which is already in memory as JSON string. e.g. the string ","text":"TRUE/FALSE validation successful/failed","code":""},{"path":"/reference/validateFromString.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Syntactically validates an mzQC document which is already in memory as JSON string. e.g. the string ","text":"returned TRUE/FALSE additional attributes case errors. Use attributes(result) access .","code":""},{"path":"/reference/writeMZQC.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes a full mzQC object to disk. — writeMZQC","title":"Writes a full mzQC object to disk. — writeMZQC","text":"can theory also provide mzQC subelement, resulting mzQC file validate since incomplete.","code":""},{"path":"/reference/writeMZQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes a full mzQC object to disk. — writeMZQC","text":"","code":"writeMZQC(filepath, mzqc_obj)"},{"path":"/reference/writeMZQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes a full mzQC object to disk. — writeMZQC","text":"filepath filename (optional path) write . mzqc_obj MzQCmzQC root object, serialized JSON written disk","code":""},{"path":"/reference/writeMZQC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Writes a full mzQC object to disk. — writeMZQC","text":"filename '.mzQC' (case sensitive) suffix. warning otherwise.","code":""},{"path":"/news/index.html","id":"cran-version-060-20250602","dir":"Changelog","previous_headings":"","what":"[CRAN] version 0.6.0 (2025/06/02)","title":"[CRAN] version 0.6.0 (2025/06/02)","text":"fix MzQCbaseQuality$getMetric() function (#25) extend basic guide vignette showcase different value types QualityMetric (single value, n-tuple, table, matrix) check warn extraneous data mzQC files part specification","code":""},{"path":"/news/index.html","id":"cran-version-056-20250522","dir":"Changelog","previous_headings":"","what":"[CRAN] version 0.5.6 (2025/05/22)","title":"[CRAN] version 0.5.6 (2025/05/22)","text":"CRAN release: 2025-05-22 improved error messages attempting write invalid mzQC files runQuality/setQuality classes now getMetric() member function easier extraction metrics fixed MzQCDateTime contain ‘Z’ end time indicate UTC time full ISO8601 compliance update local psi-ms-cv version 4.1.193","code":""},{"path":"/news/index.html","id":"cran-version-055-20250322","dir":"Changelog","previous_headings":"","what":"[CRAN] version 0.5.5 (2025/03/22)","title":"[CRAN] version 0.5.5 (2025/03/22)","text":"CRAN release: 2025-03-23 improved api documentation robust handling units","code":""},{"path":"/news/index.html","id":"cran-version-054-20240415","dir":"Changelog","previous_headings":"","what":"[CRAN] version 0.5.4 (2024/04/15)","title":"[CRAN] version 0.5.4 (2024/04/15)","text":"CRAN release: 2024-04-16 robust handling faulty internet connection retrieving latest PSI-MS CV","code":""},{"path":"/news/index.html","id":"cran-version-053-20230824","dir":"Changelog","previous_headings":"","what":"[CRAN] version 0.5.3 (2023/08/24)","title":"[CRAN] version 0.5.3 (2023/08/24)","text":"CRAN release: 2023-08-25 convenience functions create mzQC document, e.g. ‘localFileToURI()’","code":""},{"path":"/news/index.html","id":"cran-version-052-20230805","dir":"Changelog","previous_headings":"","what":"[CRAN] version 0.5.2 (2023/08/05)","title":"[CRAN] version 0.5.2 (2023/08/05)","text":"CRAN release: 2023-08-07 Loads PSI-MS CV required (package loaded, running certain functions depend CV). documentation fixes (mostly CV related)","code":""},{"path":"/news/index.html","id":"cran-version-051-20230710","dir":"Changelog","previous_headings":"","what":"[CRAN] version 0.5.1 (2023/07/10)","title":"[CRAN] version 0.5.1 (2023/07/10)","text":"CRAN release: 2023-07-11 fixes bug 0.5.0 internet connection missing","code":""},{"path":"/news/index.html","id":"cran-version-050-20230704","dir":"Changelog","previous_headings":"","what":"[CRAN] version 0.5.0 (2023/07/04)","title":"[CRAN] version 0.5.0 (2023/07/04)","text":"CRAN release: 2023-07-06 support latest PSI-MS controlled vocabulary (via automatic download)","code":""},{"path":"/news/index.html","id":"cran-version-042-20230423","dir":"Changelog","previous_headings":"","what":"[CRAN] version 0.4.2 (2023/04/23)","title":"[CRAN] version 0.4.2 (2023/04/23)","text":"CRAN release: 2023-04-23 bugfix release (CV_ member found rmzqc attached)","code":""},{"path":"/news/index.html","id":"cran-version-041-20230411","dir":"Changelog","previous_headings":"","what":"[CRAN] version 0.4.1 (2023/04/11)","title":"[CRAN] version 0.4.1 (2023/04/11)","text":"CRAN release: 2023-04-11 Feature: support validation mzQC files (via validateFrom…() functions, see Vignettes)","code":""},{"path":"/news/index.html","id":"version-030-20221011","dir":"Changelog","previous_headings":"","what":"version 0.3.0 (2022/10/11)","title":"version 0.3.0 (2022/10/11)","text":"Feature: support reading mzQC files (via readMZQC(), see Vignettes)","code":""},{"path":"/news/index.html","id":"version-022-20220821","dir":"Changelog","previous_headings":"","what":"version 0.2.2 (2022/08/21)","title":"version 0.2.2 (2022/08/21)","text":"Fix: make CV singleton object available outside package (via ‘getCVSingleton()’)","code":""},{"path":"/news/index.html","id":"version-021-20220928","dir":"Changelog","previous_headings":"","what":"version 0.2.1 (2022/09/28)","title":"version 0.2.1 (2022/09/28)","text":"Update documentation","code":""},{"path":"/news/index.html","id":"version-020-20220926","dir":"Changelog","previous_headings":"","what":"version 0.2.0 (2022/09/26)","title":"version 0.2.0 (2022/09/26)","text":"Add jupyter notebook links Google Colab Add pkgdown website Update documentation","code":""},{"path":"/news/index.html","id":"cran-version-010-20220818","dir":"Changelog","previous_headings":"","what":"[CRAN] version 0.1.0 (2022/08/18)","title":"[CRAN] version 0.1.0 (2022/08/18)","text":"CRAN release: 2022-08-18 initial release (core mzQC data structures; writing mzQC JSON; tests) Versions uploaded CRAN marked [CRAN].","code":""}]
